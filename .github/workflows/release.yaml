name: Release

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  actions: write

env:
  NODE_VERSION: 'lts/*'
  PYTHON_VERSION: '3.12'

jobs:
  release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    container:
      image: python:3.12

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
          clean: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create virtual environment
        run: |
          python3 -m venv venv
        shell: bash

      - name: Install Dependencies
        run: |
          source venv/bin/activate
          npm install --no-fund
          python3 -m pip install --upgrade pip
          python3 -m pip install flit invoke build twine
          FLIT_ROOT_INSTALL=1 invoke install --prod
          pip list
        shell: bash

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory /__w/astrocompute/astrocompute

      - name: Run Semantic Release
        id: semantic_release
        env:
          DEBUG: semantic-release:*
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          source venv/bin/activate
          set -e  # Stop on the first error
          npx semantic-release || echo "semantic-release failed with exit code $?"
          echo "version_changed=${{ steps.semantic_release.outputs.version_changed }}"
        shell: bash

      - name: Conditionally Build and Deploy Package
        if: steps.semantic_release.outcome == 'success' && steps.semantic_release.outputs.version_changed == 'true'
        env:
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
        run: |
          source venv/bin/activate
          invoke build
          echo "Deploying to Artifactory URL: $ARTIFACTORY_URL"
          python -m twine upload --repository-url $ARTIFACTORY_URL --non-interactive --verbose --username $ARTIFACTORY_USER --password $ARTIFACTORY_TOKEN dist/*
        shell: bash
